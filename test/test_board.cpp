#include "../inc/Game.hpp"
#include "../inc/ClassicBoard.hpp"
#include <gtest/gtest.h>

TEST(IBoard, TestTransposedBoard){
    IBoard::bitboard test(
"0111110000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000");

    IBoard::bitboard waited_result(
"0000000000000000000"
"1000000000000000000"
"1000000000000000000"
"1000000000000000000"
"1000000000000000000"
"1000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000");

    Game gameTest;
    int player = 0;
    int width = gameTest.getClassicBoard().getWidth();
    for (int i = 0; i < test.size(); i++){
        if (!test[i])
            continue;
        gameTest.setPosToBoards(i % width, i / width, test[i]);
    }
    
    EXPECT_EQ(gameTest.getTransposedBoard().getPlayer1(), waited_result);
}


TEST(IBoard, TestDiagBoard){
    IBoard::bitboard test(
"0111110000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000");

    IBoard::bitboard waited_result(
"0000000000000000000"
"0100000000000000000"
"0010000000000000000"
"0001000000000000000"
"0000100000000000000"
"0000010000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000");

    Game gameTest;
    int player = 0;
    int width = gameTest.getDiagBoard().getWidth();
    for (int i = 0; i < test.size(); i++){
        if (!test[i])
            continue;
        gameTest.setPosToBoards(i % width, i / width, test[i]);
    }
    
    gameTest.getClassicBoard().printBoard();
    gameTest.getDiagBoard().printBoard();

    EXPECT_EQ(gameTest.getDiagBoard().getPlayer1(), waited_result);
}

TEST(ClassicBoard, extractPattern){
    IBoard::bitboard test(
"0000000000000000000"
"0101100000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000"
"0000000000000000000");

    ClassicBoard board;

    int player = 0;
    int width = board.getWidth();
    for (int i = 0; i < test.size(); i++){
        if (!test[i])
            continue;
        board.setPos(i % width, i / width, test[i]);
    }
    
    board.printBoard();
    patternBitset  waitedResult("1011");

    EXPECT_EQ(board.extractPattern(1, 1, 4, 1), waitedResult);
}

